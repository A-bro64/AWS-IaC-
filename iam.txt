resource "aws_iam_group_membership" "SysAdmin" {
  name = "SysAdmin"
  users = [
    aws_iam_user.SysAdmin1.name,
    aws_iam_user.SysAdmin2.name,
  ]
  group = aws_iam_group.SysAdmin.name
}
resource "aws_iam_group" "SysAdmin" {
  name = "SysAdmin"
}
resource "aws_iam_user" "SysAdmin1" {
  name = "SysAdmin1"
}
resource "aws_iam_user" "SysAdmin2" {
  name = "SysAdmin2"
}
## iam login profiles can be configured by Downloading KeybaseApp to Local enviroment
# resource "aws_iam_user_login_profile" "SysAdmin1" {
#   user            = "SysAdmin1"
#   pgp_key         = "keybase:CloudStars_2021" #Keybase:example --example means the account name of the user with the pgp key
#   password_length = 10
# }

# resource "aws_iam_user_login_profile" "SysAdmin2" {
#   user            = "SysAdmin2"
#   pgp_key         = "keybase:CloudStars_2021" #Keybase:example --example means the account name of the user with the pgp key
#   password_length = 10
# }

resource "aws_iam_group_policy" "SysAdmin_policy" {
  name  = "SysAdmin_policy"
  group = aws_iam_group.SysAdmin.id

  policy = <<EOF
{
    "Statement": [
        {
            "Action": [
                "acm:Describe*",
                "acm:Get*",
                "acm:List*",
                "acm:Request*",
                "acm:Resend*",
                "autoscaling:*",
                "cloudtrail:DescribeTrails",
                "cloudtrail:GetTrailStatus",
                "cloudtrail:ListPublicKeys",
                "cloudtrail:ListTags",
                "cloudtrail:LookupEvents",
                "cloudtrail:StartLogging",
                "cloudtrail:StopLogging",
                "cloudwatch:*",
                "codecommit:BatchGetRepositories",
                "codecommit:CreateBranch",
                "codecommit:CreateRepository",
                "codecommit:Get*",
                "codecommit:GitPull",
                "codecommit:GitPush",
                "codecommit:List*",
                "codecommit:Put*",
                "codecommit:Test*",
                "codecommit:Update*",
                "codedeploy:*",
                "codepipeline:*",
                "config:*",
                "ds:*",
                "ec2:*",
                "elasticloadbalancing:*",
                "events:*",
                "iam:GetAccount*",
                "iam:GetContextKeys*",
                "iam:GetCredentialReport",
                "iam:ListAccountAliases",
                "iam:ListGroups",
                "iam:ListOpenIDConnectProviders",
                "iam:ListPolicies",
                "iam:ListPoliciesGrantingServiceAccess",
                "iam:ListRoles",
                "iam:ListSAMLProviders",
                "iam:ListServerCertificates",
                "iam:Simulate*",
                "iam:UpdateServerCertificate",
                "iam:UpdateSigningCertificate",
                "kinesis:ListStreams",
                "kinesis:PutRecord",
                "kms:CreateAlias",
                "kms:CreateKey",
                "kms:DeleteAlias",
                "kms:Describe*",
                "kms:GenerateRandom",
                "kms:Get*",
                "kms:List*",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "lambda:Create*",
                "lambda:Delete*",
                "lambda:Get*",
                "lambda:InvokeFunction",
                "lambda:List*",
                "lambda:PublishVersion",
                "lambda:Update*",
                "logs:*",
                "rds:Describe*",
                "rds:ListTagsForResource",
                "route53:*",
                "route53domains:*",
                "ses:*",
                "sns:*",
                "sqs:*",
                "trustedadvisor:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
        },
        {
            "Action": [
                "ec2:AcceptVpcPeeringConnection",
                "ec2:AttachClassicLinkVpc",
                "ec2:AttachVolume",
                "ec2:AuthorizeSecurityGroupEgress",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:CreateVpcPeeringConnection",
                "ec2:DeleteCustomerGateway",
                "ec2:DeleteDhcpOptions",
                "ec2:DeleteInternetGateway",
                "ec2:DeleteNetworkAcl*",
                "ec2:DeleteRoute",
                "ec2:DeleteRouteTable",
                "ec2:DeleteSecurityGroup",
                "ec2:DeleteVolume",
                "ec2:DeleteVpcPeeringConnection",
                "ec2:DetachClassicLinkVpc",
                "ec2:DetachVolume",
                "ec2:DisableVpcClassicLink",
                "ec2:EnableVpcClassicLink",
                "ec2:GetConsoleScreenshot",
                "ec2:RebootInstances",
                "ec2:RejectVpcPeeringConnection",
                "ec2:RevokeSecurityGroupEgress",
                "ec2:RevokeSecurityGroupIngress",
                "ec2:RunInstances",
                "ec2:StartInstances",
                "ec2:StopInstances",
                "ec2:TerminateInstances"
            ],
            "Effect": "Allow",
            "Resource": [
                "*"
            ]
        },
        {
            "Action": "s3:*",
            "Effect": "Allow",
            "Resource": [
                "*"
            ]
        },
        {
            "Action": [
                "iam:GetAccessKeyLastUsed",
                "iam:GetGroup*",
                "iam:GetInstanceProfile",
                "iam:GetLoginProfile",
                "iam:GetOpenIDConnectProvider",
                "iam:GetPolicy*",
                "iam:GetRole*",
                "iam:GetSAMLProvider",
                "iam:GetSSHPublicKey",
                "iam:GetServerCertificate",
                "iam:GetServiceLastAccessed*",
                "iam:GetUser*",
                "iam:ListAccessKeys",
                "iam:ListAttached*",
                "iam:ListEntitiesForPolicy",
                "iam:ListGroupPolicies",
                "iam:ListGroupsForUser",
                "iam:ListInstanceProfiles*",
                "iam:ListMFADevices",
                "iam:ListPolicyVersions",
                "iam:ListRolePolicies",
                "iam:ListSSHPublicKeys",
                "iam:ListSigningCertificates",
                "iam:ListUserPolicies",
                "iam:Upload*"
            ],
            "Effect": "Allow",
            "Resource": [
                "*"
            ]
        },
        {
            "Action": [
                "iam:GetRole",
                "iam:ListRoles",
                "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": [
                "arn:aws:iam::*:role/rds-monitoring-role",
                "arn:aws:iam::*:role/ec2-sysadmin-*",
                "arn:aws:iam::*:role/ecr-sysadmin-*",
                "arn:aws:iam::*:role/lambda-sysadmin-*"
            ]
        }
    ],
    "Version": "2012-10-17"
}
EOF
}
#DATABASE ADMINS CREATED
resource "aws_iam_group_membership" "DBAdmin" {
  name = "DBAdmin"
  users = [

    aws_iam_user.DBAdmin1.name,
    aws_iam_user.DBAdmin2.name,

  ]
  group = aws_iam_group.DBAdmin.name
}
resource "aws_iam_group" "DBAdmin" {
  name = "DBAdmin"
}
resource "aws_iam_user" "DBAdmin1" {
  name = "DBAdmin1"
}
resource "aws_iam_user" "DBAdmin2" {
  name = "DBAdmin2"
}
# resource "aws_iam_user_login_profile" "DBAdmin1" {
#   user            = "DBAdmin1"
#   pgp_key         = "keybase:CloudStars_2021" #Keybase:example --example means the account name of the user with the pgp key
#   password_length = 10
# }
# resource "aws_iam_user_login_profile" "DBAdmin2" {
#   user            = "DBAdmin2"
#   pgp_key         = "keybase:CloudStars_2021" #Keybase:example --example means the account name of the user with the pgp key
#   password_length = 10
# }
resource "aws_iam_account_password_policy" "strict" {
  require_lowercase_characters = true
  require_numbers              = true
  require_uppercase_characters = true
  require_symbols              = true
  max_password_age             = 90
  password_reuse_prevention    = 3
  minimum_password_length      = 8
}
resource "aws_iam_group_policy" "DBAdmin_policy" {
  name   = "DBAdmin_policy"
  group  = aws_iam_group.DBAdmin.name
  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:DeleteAlarms",
                "cloudwatch:Describe*",
                "cloudwatch:DisableAlarmActions",
                "cloudwatch:EnableAlarmActions",
                "cloudwatch:Get*",
                "cloudwatch:List*",
                "cloudwatch:PutMetricAlarm",
                "datapipeline:ActivatePipeline",
                "datapipeline:CreatePipeline",
                "datapipeline:DeletePipeline",
                "datapipeline:DescribeObjects",
                "datapipeline:DescribePipelines",
                "datapipeline:GetPipelineDefinition",
                "datapipeline:ListPipelines",
                "datapipeline:PutPipelineDefinition",
                "datapipeline:QueryObjects",
                "dynamodb:*",
                "ec2:DescribeAccountAttributes",
                "ec2:DescribeAddresses",
                "ec2:DescribeAvailabilityZones",
                "ec2:DescribeInternetGateways",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs",
                "elasticache:*",
                "iam:ListRoles",
                "iam:GetRole",
                "kms:ListKeys",
                "lambda:CreateEventSourceMapping",
                "lambda:CreateFunction",
                "lambda:DeleteEventSourceMapping",
                "lambda:DeleteFunction",
                "lambda:GetFunctionConfiguration",
                "lambda:ListEventSourceMappings",
                "lambda:ListFunctions",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:FilterLogEvents",
                "logs:GetLogEvents",
                "logs:Create*",
                "logs:PutLogEvents",
                "logs:PutMetricFilter",
                "rds:*",
                "redshift:*",
                "s3:CreateBucket",
                "sns:CreateTopic",
                "sns:DeleteTopic",
                "sns:Get*",
                "sns:List*",
                "sns:SetTopicAttributes",
                "sns:Subscribe",
                "sns:Unsubscribe"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "s3:AbortMultipartUpload",
                "s3:DeleteObject*",
                "s3:Get*",
                "s3:List*",
                "s3:PutAccelerateConfiguration",
                "s3:PutBucketTagging",
                "s3:PutBucketVersioning",
                "s3:PutBucketWebsite",
                "s3:PutLifecycleConfiguration",
                "s3:PutReplicationConfiguration",
                "s3:PutObject*",
                "s3:Replicate*",
                "s3:RestoreObject"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "iam:PassRole"
            ],
            "Resource": [
                "arn:aws:iam::*:role/rds-monitoring-role",
                "arn:aws:iam::*:role/rdbms-lambda-access",
                "arn:aws:iam::*:role/lambda_exec_role",
                "arn:aws:iam::*:role/lambda-dynamodb-*",
                "arn:aws:iam::*:role/lambda-vpc-execution-role",
                "arn:aws:iam::*:role/DataPipelineDefaultRole",
                "arn:aws:iam::*:role/DataPipelineDefaultResourceRole"
            ]
        }
    ]
}
EOF
}

#CREATE MONITOR GROUP AND USERS

resource "aws_iam_group_membership" "Monitor" {
  name = "Monitor"
  users = [
    aws_iam_user.Monitor1.name,
    aws_iam_user.Monitor2.name,
    aws_iam_user.Monitor3.name,
    aws_iam_user.Monitor4.name,
  ]
  group = aws_iam_group.Monitor.name
}
resource "aws_iam_group" "Monitor" {
  name = "Monitor"
}
resource "aws_iam_user" "Monitor1" {
  name = "Monitor1"
}
resource "aws_iam_user" "Monitor2" {
  name = "Monitor2"
}
resource "aws_iam_user" "Monitor3" {
  name = "Monitor3"
}
resource "aws_iam_user" "Monitor4" {
  name = "Monitor4"
}
# resource "aws_iam_user_login_profile" "Monitor1" {
#   user            = "Monitor1"
#   pgp_key         = "keybase:CloudStars_2021" #Keybase:example --example means the account name of the user with the pgp key
#   password_length = 10
# }
# resource "aws_iam_user_login_profile" "Monitor2" {
#   user            = "Monitor2"
#   pgp_key         = "keybase:CloudStars_2021"
#   password_length = 10
# }
# resource "aws_iam_user_login_profile" "Monitor3" {
#   user            = "Monitor3"
#   pgp_key         = "keybase:CloudStars_2021"
#   password_length = 10
# }
# resource "aws_iam_user_login_profile" "Monitor4" {
#   user            = "Monitor4"
#   pgp_key         = "keybase:CloudStars_2021"
#   password_length = 10
# }

resource "aws_iam_group_policy" "Monitor_policy" {
  name   = "Monitor_policy"
  group  = aws_iam_group.Monitor.id
  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "ec2:GetEbsEncryptionByDefault",
                "s3:GetObjectVersionTagging",
                "ec2:DescribeVolumesModifications",
                "ec2:GetHostReservationPurchasePreview",
                "ec2:GetConsoleScreenshot",
                "s3:GetObjectAcl",
                "s3:GetBucketObjectLockConfiguration",
                "ec2:GetLaunchTemplateData",
                "ec2:DescribeScheduledInstanceAvailability",
                "rds:DownloadDBLogFilePortion",
                "ec2:GetEbsDefaultKmsKeyId",
                "s3:GetObjectVersionAcl",
                "s3:GetBucketPolicyStatus",
                "ec2:GetManagedPrefixListEntries",
                "s3:GetObjectRetention",
                "s3:GetBucketWebsite",
                "s3:GetJobTagging",
                "ec2:DescribeVpnConnections",
                "s3:ListJobs",
                "ec2:DescribeFastSnapshotRestores",
                "s3:GetObjectLegalHold",
                "s3:GetBucketNotification",
                "ec2:GetReservedInstancesExchangeQuote",
                "s3:GetReplicationConfiguration",
                "s3:ListMultipartUploadParts",
                "s3:GetObject",
                "ec2:GetPasswordData",
                "ec2:DescribeScheduledInstances",
                "s3:DescribeJob",
                "s3:GetAnalyticsConfiguration",
                "ec2:DescribeElasticGpus",
                "s3:GetObjectVersionForReplication",
                "s3:GetAccessPoint",
                "s3:GetLifecycleConfiguration",
                "ec2:GetDefaultCreditSpecification",
                "s3:GetBucketTagging",
                "s3:GetInventoryConfiguration",
                "s3:ListBucketVersions",
                "s3:GetBucketLogging",
                "ec2:GetCapacityReservationUsage",
                "s3:GetAccelerateConfiguration",
                "s3:GetBucketPolicy",
                "ec2:GetConsoleOutput",
                "s3:GetObjectVersionTorrent",
                "s3:GetEncryptionConfiguration",
                "s3:GetBucketRequestPayment",
                "s3:GetAccessPointPolicyStatus",
                "s3:GetObjectTagging",
                "s3:GetMetricsConfiguration",
                "s3:GetBucketPublicAccessBlock",
                "s3:ListBucketMultipartUploads",
                "s3:ListAccessPoints",
                "ec2:DescribeTags",
                "ec2:GetCoipPoolUsage",
                "s3:GetBucketVersioning",
                "s3:GetBucketAcl",
                "s3:GetObjectTorrent",
                "s3:GetAccountPublicAccessBlock",
                "rds:ListTagsForResource",
                "ec2:GetManagedPrefixListAssociations",
                "s3:GetBucketCORS",
                "s3:GetBucketLocation",
                "s3:GetAccessPointPolicy",
                "s3:GetObjectVersion"
            ],
            "Resource": "*"
        }
    ]
}
EOF
}